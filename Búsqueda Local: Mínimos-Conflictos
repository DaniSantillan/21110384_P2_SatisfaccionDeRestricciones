import random

def conflictos(agenda, clase, horario):
    """Calcula el número de conflictos al asignar una clase en un horario específico."""
    count = 0
    for otra_clase, otro_horario in agenda.items():
        if otra_clase != clase and otro_horario == horario:
            count += 1
    return count

def minimos_conflictos(agenda, max_iter):
    """Resuelve el problema de asignar horarios a clases utilizando Mínimos-Conflictos."""
    clases = list(agenda.keys())

    for _ in range(max_iter):
        clase = random.choice(clases)
        mejores_horarios = [horario for horario in range(1, 6) if conflictos(agenda, clase, horario) == 0]

        if mejores_horarios:
            agenda[clase] = random.choice(mejores_horarios)
        else:
            conflicto_clases = [(c, conflictos(agenda, c, agenda[c])) for c in clases if conflictos(agenda, c, agenda[c]) > 0]
            conflicto_clases.sort(key=lambda x: x[1], reverse=True)
            peor_clase = conflicto_clases[0][0]
            peor_horario = agenda[peor_clase]
            mejores_horarios = [horario for horario in range(1, 6) if conflictos(agenda, peor_clase, horario) == 0]
            agenda[peor_clase] = random.choice(mejores_horarios)

            print(f"Resuelto conflicto: Movido {peor_clase} del horario {peor_horario} al {agenda[peor_clase]}")

        if all(conflictos(agenda, c, agenda[c]) == 0 for c in clases):
            return agenda

    print("No se encontró una solución después de", max_iter, "iteraciones.")
    return None

# Ejemplo de uso
horarios_iniciales = {
    'Matemáticas': 1,
    'Historia': 2,
    'Inglés': 3,
    'Ciencias': 4,
    'Educación Física': 5
}

solucion = minimos_conflictos(horarios_iniciales, max_iter=100)
print("Solución final:", solucion)
